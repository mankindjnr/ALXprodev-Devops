#!/bin/bash

# URL of the Pokémon API
pokemon_api="https://pokeapi.co/api/v2/pokemon/"

# List of Pokémon to fetch data for
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Output directory for fetched data
output_dir="pokemon_data"
mkdir -p "$output_dir"

# Function to fetch Pokémon data
fetch_pokemon_data() {
  pokemon_name=$1
  output_file="$output_dir/${pokemon_name}.json"

  echo "Fetching data for $pokemon_name..."
  curl -s -X GET "${pokemon_api}${pokemon_name}" -o "$output_file"

  if [ $? -eq 0 ]; then
    echo "Data for $pokemon_name saved to $output_file"
  else
    echo "Failed to fetch data for $pokemon_name"
  fi
}

# Export the function so it can be used by parallel processes
export -f fetch_pokemon_data
export pokemon_api
export output_dir

# Array to keep track of job PIDs
job_pids=()

# Fetch data for each Pokémon in parallel
for pokemon in "${pokemon_list[@]}"; do
  fetch_pokemon_data "$pokemon" &
  job_pids+=("$!") # Capture the PID of the background process
done

# Function to clean up background jobs
cleanup_jobs() {
  echo "Cleaning up background jobs..."
  for pid in "${job_pids[@]}"; do
    if kill -0 "$pid" 2>/dev/null; then
      kill "$pid"
      echo "Killed job with PID $pid"
    fi
  done
}

# Trap SIGINT and SIGTERM to clean up background jobs
trap cleanup_jobs SIGINT SIGTERM

# Wait for all background processes to complete
for pid in "${job_pids[@]}"; do
  wait "$pid"
done

echo "All Pokémon data fetched."
